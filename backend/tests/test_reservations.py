"""Tests for the availabilities crud operations. Note that the get, get all and
delete are generated by CRUDRouter so there is no need to test them."""
from datetime import datetime, timedelta, timezone

from app.utils.string_operations import obfuscate_string
from pydantic.datetime_parse import parse_datetime


def test_post_reservation(test_app):
    """Test the post route, first by checking that an object is correctly added, then
    by adding invalid and conflicting cases and checking they are not added
    """

    # Create availability records
    availabilities = [
        {"start": "2022-05-31T06:00", "end": "2022-05-31T06:30"},
        {"start": "2022-05-31T07:00", "end": "2022-05-31T08:00"},
        {"start": "2022-05-31T08:00", "end": "2022-05-31T08:45"},
        {"start": "2022-05-31T08:45", "end": "2022-05-31T09:15"},
        {"start": "2022-05-31T09:15", "end": "2022-05-31T09:30"},
        # no availability between 9h30 and 9h45
        {"start": "2022-05-31T09:45", "end": "2022-05-31T10:30"},
    ]
    for obj in availabilities:
        response = test_app.post(
            "/api/availabilities",
            json=obj,
        )
        assert response.status_code == 200

    # test one reservation
    response = test_app.post(
        "/api/reservations",
        json={
            "start": "2022-05-31T06:12",
            "end": "2022-05-31T06:32",
            "email": "test@test.com",
            "title": "mytitle",
        },
    )
    assert response.status_code == 200
    assert "id" in response.json()
    # check created_at is correctly added
    created_at = parse_datetime(response.json()["created_at"])
    assert (datetime.utcnow().replace(tzinfo=timezone.utc) - created_at) < timedelta(
        seconds=5
    )
    # check time was rounded to last 5 min slot
    assert response.json()["start"] == "2022-05-31T06:10:00+00:00"
    assert response.json()["end"] == "2022-05-31T06:30:00+00:00"

    # check valid reservations
    valid_reservation_times = [
        # full availability slot
        {"start": "2022-05-31T07:00", "end": "2022-05-31T08:00"},
        # several in same availability slot
        {"start": "2022-05-31T08:00", "end": "2022-05-31T08:20"},
        {"start": "2022-05-31T08:20", "end": "2022-05-31T08:25"},
        {"start": "2022-05-31T08:35", "end": "2022-05-31T08:40"},
        # one in several availability slots
        {"start": "2022-05-31T08:40", "end": "2022-05-31T09:20"},
    ]

    for obj in valid_reservation_times:

        response = test_app.post(
            "/api/reservations",
            json={**obj, "email": "test@test.com", "title": "My title"},
        )
        assert response.status_code == 200

    # check reservation in unavailable slot
    not_available_reservation_times = [
        {"start": "2022-05-31T12:00", "end": "2022-05-31T13:00"},
        {"start": "2022-05-31T09:20", "end": "2022-05-31T10:00"},
    ]
    for obj in not_available_reservation_times:

        response = test_app.post(
            "/api/reservations",
            json={**obj, "email": "test@test.com", "title": "My title"},
        )
        assert response.status_code == 400

    # bad requests
    for obj in [
        # end is equal to start
        {"start": "2022-05-31T04:40", "end": "2022-05-31T04:40"},
        # end is before start
        {"start": "2022-05-31T04:40", "end": "2022-05-31T04:30"},
        {"start": "2022-05-31T04:40", "end": "2022-05-30T04:50"},
        # end is too far in the future
        {"start": "2022-05-31T04:40", "end": "2023-05-31T04:50"},
    ]:

        response = test_app.post(
            "/api/reservations",
            json={**obj, "email": "test@test.com", "title": "My title"},
        )
        assert response.status_code == 400

    # wrong email
    response = test_app.post(
        "/api/reservations",
        json={
            "start": "2022-05-31T10:25",
            "end": "2023-05-31T10:30",
            "email": "test",
            "title": "My title",
        },
    )
    assert response.status_code == 422

    # conflicts:
    for obj in [
        # equal
        {"start": "2022-05-31T07:00", "end": "2022-05-31T08:00"},
        # contained in
        {"start": "2022-05-31T07:05", "end": "2022-05-31T07:10"},
        {"start": "2022-05-31T07:05", "end": "2022-05-31T08:00"},
        {"start": "2022-05-31T07:00", "end": "2022-05-31T07:05"},
        # end in
        {"start": "2022-05-31T05:00", "end": "2022-05-31T07:05"},
        # start in
        {"start": "2022-05-31T09:00", "end": "2022-05-31T10:00"},
        # contains
        {"start": "2022-05-31T04:00", "end": "2022-05-31T10:00"},
    ]:
        response = test_app.post(
            "/api/reservations",
            json={**obj, "email": "test@test.com", "title": "My title"},
        )
        assert response.status_code == 409


def test_get_all_reservations(test_app):
    """Tests the get route for all the reservations."""
    # Create availability records
    availabilities = [
        {"start": "2022-05-31T06:00", "end": "2022-05-31T06:30"},
        {"start": "2022-05-31T07:00", "end": "2022-05-31T08:00"},
    ]
    for obj in availabilities:
        response = test_app.post(
            "/api/availabilities",
            json=obj,
        )
        assert response.status_code == 200

    valid_reservation = [
        {
            "start": "2022-05-31T06:00",
            "end": "2022-05-31T06:30",
            "title": "title1",
            "email": "name1@company1.com",
        },
        {
            "start": "2022-05-31T07:00",
            "end": "2022-05-31T07:30",
            "title": "title2",
            "email": "name2@company2.com",
        },
    ]

    for obj in valid_reservation:

        response = test_app.post(
            "/api/reservations",
            json=obj,
        )
        assert response.status_code == 200

    response = test_app.get("/api/reservations")
    assert response.status_code == 200
    reservations = response.json()
    assert len(reservations) == 2
    assert reservations[0]["email"] == obfuscate_string("name1@company1.com")


def test_delete_reservation(test_app):
    """tests the delete route for reservations"""

    response = test_app.post(
        "/api/availabilities",
        json={"start": "2022-05-31T06:00", "end": "2022-05-31T07:00"},
    )
    assert response.status_code == 200

    email = "name1@company1.com"
    wrong_email = "name2@company2.com"
    response = test_app.post(
        "/api/reservations",
        json={
            "start": "2022-05-31T06:00",
            "end": "2022-05-31T06:30",
            "title": "title1",
            "email": "name1@company1.com",
        },
    )
    assert response.status_code == 200

    resp_id = response.json()["id"]
    resp_wrong_id = resp_id + 1

    # wrong id: fails to delete
    response = test_app.delete(f"/api/reservations/{resp_wrong_id}/{email}")
    assert response.status_code == 404

    # wrong email: fails to delete
    response = test_app.delete(f"/api/reservations/{resp_id}/{wrong_email}")
    assert response.status_code == 404

    # correct email and id: deletion complete
    response = test_app.delete(f"/api/reservations/{resp_id}/{email}")
    assert response.status_code == 200
    assert "title" in response.json()

    # try again, record is not there anymore
    response = test_app.delete(f"/api/reservations/{resp_id}/{email}")
    assert response.status_code == 404
